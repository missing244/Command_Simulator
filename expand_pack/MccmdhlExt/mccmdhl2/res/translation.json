{
    "note": {
        "_comment": "A comment that is ignored",
        "_empty_line": "An empty line",
        "_selector": {
            "player_name": "A player name",
            "complex": {
                "root": "Use complex rules to choose entities",
                "vars": {
                    "e": "All entities",
                    "s": "Executer",
                    "a": "All players",
                    "p": "Nearest player",
                    "r": "Random player",
                    "initiator": "Player who opened dialogue (NPC only)"
                },
                "begin": "Add entity filters",
                "end": "End of entity filters",
                "separator": "Next entity filter",
                "arg_names": {
                    "r": "Max distance",
                    "rm": "Min distance",
                    "dx": "Length on X axis of position box",
                    "dy": "Length on Y axis of position box",
                    "dz": "Length on Z axis of position box",
                    "x": "X position of analysis",
                    "y": "Y position of analysis",
                    "z": "Z position of analysis",
                    "scores": "Score on scoreboard",
                    "tag": "Entity tag",
                    "name": "Name",
                    "type": "Type",
                    "family": "Family",
                    "rx": "Max vertical rotation",
                    "rxm": "Min vertical rotation",
                    "ry": "Max horizontal rotation",
                    "rym": "Min horizontal rotation",
                    "hasitem": "Items in inventory",
                    "l": "Max exp level",
                    "lm": "Min exp level",
                    "m": "Game mode",
                    "c": "Max number of entity",
                    "haspermission": "Input permission"
                },
                "equals": "Input argument value",
                "scores": {
                    "begin": "Start of score filters",
                    "end": "End of score filters",
                    "separator": "Next score filter"
                },
                "hasitem": {
                    "begin": {
                        "array": "Multiple hasitem rules",
                        "object": "A hasitem rule"
                    },
                    "separator": {
                        "array": "Next hasitem rule",
                        "object": "Next hasitem argument"
                    },
                    "equals": "Input hasitem argument value",
                    "end": {
                        "array": "End of all hasitem rules",
                        "object": "End of hasitem rule"
                    },
                    "item": "Type of item",
                    "data": "Item data value (use carefully!)",
                    "quantity": "Quantity (0 -> no item)",
                    "location": "Inventory slot",
                    "slot": "Slot ID of 'location'"
                },
                "tag": "Entity tag; omitted -> no tag",
                "haspermission": {
                    "begin": "Start of input permission filters",
                    "end": "End of input permission filters",
                    "separator": "Next input permission filter"
                }
            }
        },
        "_pos": {
            "float_offset": "Position offset",
            "absolute": {
                "x": "Absolute position (X axis)",
                "y": "Absolute position (Y axis)",
                "z": "Absolute position (Z axis)"
            },
            "relative": {
                "x": "Relative position (X axis)",
                "y": "Relative position (Y axis)",
                "z": "Relative position (Z axis)"
            },
            "local": {
                "x": "Local position (left)",
                "y": "Local position (up)",
                "z": "Local position (front)"
            }
        },
        "_rot": {
            "float_offset": "Rotation offset",
            "absolute": {
                "x": "Vertical rotation (-90: Up, 90: Down)",
                "y": "Horizontal rotation (-180: Z-, -90: X+, 0: Z+, 90: X-)"
            },
            "relative": {
                "x": "Vertical rotation (+: Down)",
                "y": "Horizontal rotation (+: Clockwise)"
            }
        },
        "_space": "Next argument",
        "_invert": "Invertion",
        "_wildcard": "Wildcard",
        "_int_range": "Integer range",
        "_scoreboard": "Scoreboard objective",
        "_gamemode": {
            "_number": "Integer ID (unrecommended)",
            "survival": "Survival mode (0)",
            "creative": "Creative mode (1)",
            "adventure": "Adventure mode (2)",
            "spectator": "Spectator mode",
            "default": "World default mode"
        },
        "_block_state": {
            "begin": "Begin of block states",
            "separator": "Next block state",
            "end": "End of block states",
            "key": "Block state name",
            "value": "Block state value"
        },
        "_item_data": "Item data value",
        "_block_data": "Block data value (unrecommended)",
        "_slot_number": "Slot number",
        "_states": {
            "enabled": "Enabled",
            "disabled": "Disabled"
        },
        "_name_tag": "Entity name tag",
        "_wildcard_entity_event": "No entity event",
        "_wildcard_score_holder": "All score holders tracked",
        "_circle": {
            "root": "Specify a circle area using center position and radius",
            "radius": "Radius (blocks)"
        },
        "_facing": "Facing an entity or position",
        "_blocks_scan_mode": {
            "all": "Check all blocks",
            "masked": "Ignore Air blocks"
        },
        "_tickingarea": "Ticking area name",
        "_json": {
            "_suggested": "*Recommended JSON*",
            "_libs": {
                "lock": {
                    "lock_in_slot": "Fix item in the slot",
                    "lock_in_inventory": "Fix item in inventory"
                }
            },
            "$item_components@object": {
                "_keys": {
                    "minecraft:item_lock": "Unthrowable and uncraftable item",
                    "minecraft:can_destroy": "Adventure mode block breaking tool",
                    "minecraft:can_place_on": "Adventure mode placeable block",
                    "minecraft:keep_on_death": "Won't drop when owner dies"
                },
                "!minecraft:item_lock@object": {
                    "_keys": {
                        "mode": "Lock mode"
                    }
                },
                "!minecraft:can_destroy@object": {
                    "_keys": {
                        "blocks": "Blocks that can be destroyed with this tool"
                    }
                },
                "!minecraft:can_place_on@object": {
                    "_keys": {
                        "blocks": "Blocks on which this item can be placed"
                    }
                }
            },
            "$rawtext@object": {
                "_keys": {
                    "rawtext": "Specify a JSON rawtext"
                },
                "!rawtext@array": {
                    "#value@object": {
                        "_keys": {
                            "text": "Plain text",
                            "translate": "Localization key / Substituted string",
                            "with": "Substitutions (used with 'translate')",
                            "score": "Score on scoreboard",
                            "selector": "Name of entities"
                        },
                        "!score@object": {
                            "_keys": {
                                "objective": "Scoreboard objective",
                                "name": "Score holder"
                            }
                        }
                    }
                }
            }
        },
        "help": {
            "root": "Show help messages about commands",
            "on": {
                "page": "Show a specific page of command list",
                "page_1": "Show first page of command list",
                "command": "Show usage of given command"
            }
        },
        "ability": {
            "root": "[EDU] Manage players' abilities",
            "query": {
                "unknown": "(Unknown query)",
                "ability": "Show state of given ability"
            },
            "set": "Set state of specified ability of target"
        },
        "alwaysday": {
            "root": "Lock/Unlock Alwaysday",
            "lock": "Lock Alwaysday",
            "set": "Set Alwaysday to given value"
        },
        "camera": {
            "root": "Manage cameras (player's view)",
            "clear": "Revert camera to original state",
            "fade": {
                "root": "Play a fade effect on camera",
                "color": {
                    "root": "Set view color",
                    "r": "Red scale",
                    "g": "Green scale",
                    "b": "Blue scale"
                },
                "time": {
                    "root": "Set fade time",
                    "in": "Fade-in time (seconds)",
                    "hold": "Hold time (seconds)",
                    "out": "Fade-out time (seconds)"
                }
            },
            "set": {
                "root": "Set camera position & rotation",
                "default": "Use the preset's default settings",
                "pos": "Set position of camera",
                "rot": "Set rotation of camera",
                "ease": {
                    "root": "Set easing function when changing camera",
                    "time": "Ease time (seconds)"
                }
            }
        },
        "camerashake": {
            "root": "Manage shaking of cameras (players' views)",
            "add": {
                "root": "Shake players' camera",
                "intensity": "Intensity",
                "seconds": "Duration (seconds)",
                "types": {
                    "positional": "Positional",
                    "rotational": "Rotational"
                }
            },
            "stop": "Stop to shake players' camera"
        },
        "clear": {
            "root": "Clear players' inventory",
            "max_count": "Max item count; -1 -> No Limit"
        },
        "clearspawnpoint": {
            "root": "Unset players' spawn point"
        },
        "clone": {
            "root": "Copy and paste blocks",
            "masks": {
                "masked": "Do not copy Air blocks",
                "replace": "Replace all blocks in destination area"
            },
            "clones": {
                "force": "Copy even if there's overlap between two areas",
                "move": "Replace the copied block in source area with Air",
                "normal": "No special effect"
            },
            "filtered": "Only clone blocks of specified type"
        },
        "wsserver": {
            "root": "Manage WebSocket server connection",
            "out": "Disconnect from current server",
            "address": "Server address"
        },
        "damage": {
            "root": "Damage entities",
            "amount": "Amount (1 = Half a heart)",
            "damager": "Set damager"
        },
        "deop": {
            "root": "Remove Operator permission from a player"
        },
        "dialogue": {
            "root": "[EDU] Manage dialogues with NPCs",
            "modes": {
                "open": "Open a dialogue",
                "change": "Change scene for a dialogue"
            },
            "npc": "NPC entity",
            "player": "Player entity",
            "scene": "Scene name"
        },
        "difficulty": {
            "root": "Change difficulty of world",
            "int": "Integer ID (unrecommended)",
            "diffs": {
                "peaceful": "Peaceful (0)",
                "easy": "Easy (1)",
                "normal": "Normal (2)",
                "hard": "Hard (3)"
            }
        },
        "effect": {
            "root": "Manage effects (i.e. buffs)",
            "clear": "Clear all of players' effects",
            "seconds": "Duration (in seconds; in ticks for 3 invisible buffs)",
            "amplifier": "Amplifier (level-1)",
            "hide_particles": "Whether to hide potion particles"
        },
        "enchant": {
            "root": "Enchant item held by players",
            "int_id": "Enchantment ID (unrecommended)",
            "level": "Level of enchantment"
        },
        "event": {
            "root": "Trigger entity events"
        },
        "execute": {
            "root": "Run another command in specified context and conditions",
            "subcmds": {
                "align": "Convert position to block position (floor)",
                "anchored": "Set origin of local coordinate to eyes or feet",
                "as": "Execute as an entity",
                "at": "Execute at place of an entity",
                "facing": "Change rotation according to facing place",
                "in": "Change dimension",
                "positioned": "Change position",
                "rotated": "Change rotation",
                "if": "Execute when the condition is satisfied",
                "unless": "Execute when the condition isn't satisfied",
                "run": "Specify the command to run"
            },
            "tests": {
                "block": "Check type of a block",
                "blocks": "Compare two areas",
                "entity": "Check whether an entity exists",
                "score": {
                    "root": "Scores on scoreboard",
                    "matches": "Specify a range",
                    "compare_ops": {
                        "=": "Pass if A = B",
                        ">=": "Pass if A >= B",
                        "<=": "Pass if A <= B",
                        ">": "Pass if A > B",
                        "<": "Pass if A < B"
                    }
                }
            },
            "anchors": {
                "eyes": "At entity's eyes",
                "feet": "At entity's feet"
            },
            "dims": {
                "overworld": "Overworld",
                "nether": "The Nether",
                "the_end": "The End"
            },
            "entity_variant": "Use data from an entity",
            "old": {
                "detect": "Run only when type of a block satisfies"
            }
        },
        "fill": {
            "root": "Fill an area with blocks",
            "modes": {
                "replace": {
                    "root": "Replace only a certain type of block or all blocks",
                    "all": "Replace all blocks"
                },
                "destroy": "Break original block as if a player digs it (drop item, play animation)",
                "hollow": "Create a hollow cuboid, replace inside with Air blocks",
                "keep": "Replace only Air blocks",
                "outline": "Create a hollow cuboid, leave inside the original blocks"
            }
        },
        "fog": {
            "root": "Manage fog effect",
            "modes": {
                "remove": "Remove all fogs pushed with given name",
                "pop": "Remove first fog pushed with given name",
                "push": "Push the fog effect to the player"
            },
            "user_provided_name": "Name of this fog"
        },
        "function": {
            "root": "Run a function file",
            "path": "Path to function file"
        },
        "gamemode": {
            "root": "Set players' game mode"
        },
        "gamerule": {
            "root": "Manage game rules",
            "query": "Inquire about current state of the rule",
            "value": "Modify value of the rule"
        },
        "gametest": {
            "root": "Manage GameTest tests",
            "runthis": "Run test in Strcuture Block within 15 blocks radius",
            "run": "Create and run a test specified by ID",
            "test_name": "Test ID <class name>:<test name>",
            "stop_on_failure": "Whether to stop next repetition when current test fails",
            "repeat": "Times to repeat the test",
            "rotation": "Rotate structure by <value> * 90 degrees clockwise",
            "runthese": "Run test in Strcuture Block within 200 blocks radius",
            "runset": {
                "root_regular": "Create and run all tests in a class",
                "root_untilfail": "Create and run tests in a class until a failure",
                "tag": "Class name",
                "default": "Run all tests in class \"suite:default\""
            },
            "clearall": "Clear all tests",
            "stopall": "Stop all currently running tests",
            "create": {
                "root": "Create the test -- place Structure Block and generate a default structure",
                "len_x": "X length of structure",
                "len_y": "Y length of structure",
                "len_z": "Z length of structure"
            },
            "pos": "Find nearest Structure Block within 200 blocks radius"
        },
        "give": {
            "root": "Give players items",
            "amount": "Amount of item"
        },
        "immutableworld": {
            "root": "[EDU] Manage whether world can be modified",
            "query": "Inquire about whether the world is immutable",
            "set": "Set whether the world is immutable"
        },
        "inputpermission": {
            "root": "Manage players' ability to control their character",
            "set": "Modify players' input permission",
            "query": {
                "root": "Inquire about players' input permission",
                "equal": "Succeed if the state is the same as the given state",
                "normal": "Show the state of players' given permission"
            }
        },
        "kick": {
            "root": "Kick player out of game",
            "target": "Target (Player name / selector with 'name' argument)",
            "reason": "Reason"
        },
        "kill": {
            "root": "Kill an entity"
        },
        "list": {
            "root": "List all players on the server"
        },
        "locate": {
            "root": "Find a specified structure or biome in the world",
            "biome": "Look for a biome",
            "structure": {
                "root": "Look for a structure",
                "new_chunks": "Only search in unloaded chunks or not"
            }
        },
        "loot": {
            "root": "Spawn loots from loot tables",
            "origin": {
                "kill": "Use the death drop of an entity",
                "loot": "Use a loot table path",
                "tools": {
                    "mainhand": "Use weapon on executer's main hand",
                    "offhand": "Use weapon on executer's off hand"
                }
            },
            "give": "Give the generated items to players",
            "insert": "Distribute the generated items to a block's storage",
            "spawn": "Drop the generated items as entities",
            "replace": {
                "root": "Replace specified slots with generated items",
                "entity": "Replace entity inventory",
                "block": "Replace block storage",
                "slot_count": "Number of consecutive slots to be filled"
            }
        },
        "me": {
            "root": "Show a message about executer"
        },
        "mobevent": {
            "root": "Manage mob events",
            "query": "Inquire about state of the given event",
            "value": "Modify mob event value",
            "events_enabled": "Disable all events when set to false"
        },
        "tell": {
            "root": "Send specified players a message"
        },
        "music": {
            "root": "Manage music",
            "modes": {
                "play": "Play a music",
                "queue": "Add music to play queue",
                "stop": "Stop playing a music",
                "volume": "Adjust volume of a music"
            },
            "volume": "Volume",
            "fade_in": "Fade in time (seconds)",
            "fade_out": "Fade out time (seconds)",
            "loop_modes": {
                "play_once": "Play the music once",
                "loop": "Repeat the song"
            }
        },
        "op": {
            "root": "Make players Operator of game"
        },
        "particle": {
            "root": "Generate a particle effect"
        },
        "playanimation": {
            "root": "Trigger entity animations",
            "blend": "Blend out time (seconds)",
            "stop_exp": "Stop playing if the Molang evaluates to true"
        },
        "playsound": {
            "root": "Play a sound",
            "volume": "Volume (0~1; >1 -> range set to 16 * volume)",
            "pitch": "Pitch",
            "min_volume": "Volume for players out of sound's normal range"
        },
        "recipe": {
            "root": "Manage players' recipes",
            "give": "Give/Unlock a recipe",
            "take": "Take/Lock a recipe",
            "wildcard": "All the recipes"
        },
        "reload": {
            "root": "Reload functions & scripts in behavior packs"
        },
        "replaceitem": {
            "root": "Replace specified slots with given items",
            "modes": {
                "destroy": "Replace that slot any way",
                "keep": "Don't replace if there's already something in that slot"
            },
            "entity": "Replace entity inventory",
            "block": "Replace block storage",
            "amount": "Amount of items"
        },
        "ride": {
            "root": "Manage riding relationships between entities",
            "mount": "Let target ride on another entity",
            "tp_modes": {
                "teleport_rider": "Teleport rider to ride",
                "teleport_ride": "Teleport ride to rider"
            },
            "fill_modes": {
                "if_group_fits": "Only proceed when all riders can ride on that ride",
                "until_full": "Try proceeding one by one until ride is full"
            },
            "dismount": "Make target dismount",
            "dismount_rider": "Make target's riders dismount from target",
            "summon_rider": "Summon an entity that rides on target",
            "summon_ride": "Summon an entity for target to ride on",
            "ride_modes": {
                "skip_riders": "Skip if the rider already has a ride",
                "no_ride_change": "Skip if the rider already has a ride or a rider",
                "reassign_rides": "Let the rider dismount before proceeding if it already has a ride"
            }
        },
        "say": {
            "root": "Send all players a message"
        },
        "schedule": {
            "root": "Schedule a function to be executed later",
            "area": {
                "root": "Execute a function when an area is loaded",
                "tickingarea": "Execute the function when a tickingarea is added"
            },
            "function": "Path of function to run"
        },
        "scoreboard": {
            "root": "Interact with scoreboard system",
            "players": {
                "root": "Manage scores of a score holder",
                "set": "Set a score to a specified value",
                "add": "Increase a score",
                "remove": "Decrease a score",
                "random": {
                    "root": "Randomize a score",
                    "min": "Min of random value (inclusive)",
                    "max": "Max of random value (inclusive)"
                },
                "reset": {
                    "root": "Untrack a score of a score holder",
                    "all": "Reset scores on all objectives for this target"
                },
                "test": {
                    "root": "Test whether a score is in a specified range",
                    "min": "Min value of range (inclusive)",
                    "max": "Max value of range (inclusive)",
                    "wildcard": {
                        "min": "Negative infinity for int32 (-2147483648)",
                        "max": "Positive infinity for int32 (2147483647)"
                    },
                    "no_max": "Test whether score >= given value"
                },
                "operation": {
                    "root": "Math operations between 2 scores",
                    "operators": {
                        "=": "Set A to B",
                        "+=": "Set A to A+B",
                        "-=": "Set A to A-B",
                        "*=": "Set A to A*B",
                        "/=": "Set A to A/B",
                        "%=": "Set A to A mod B",
                        "><": "Swap values of A and B",
                        "<": "Set A to min of A and B",
                        ">": "Set A to max of A and B"
                    }
                },
                "list": {
                    "root": "List all score holders / all data of specified score holders",
                    "tracking": "List all the tracking score holders in system",
                    "scores": "List scores of all objectives for the specified score holder"
                }
            },
            "objectives": {
                "root": "Manage objectives",
                "add": {
                    "root": "Add an objective",
                    "display": "Set display name of objective"
                },
                "remove": "Remove an objective",
                "setdisplay": {
                    "root": "Display objectives to players",
                    "slots": {
                        "sidebar": "On the right of screen",
                        "list": "On pause menu",
                        "belowname": "Below players' name tag"
                    },
                    "sort": {
                        "ascending": "Ascending order",
                        "descending": "Descending order"
                    },
                    "clear": "Clear this display area"
                },
                "list": "List all the objectives in system"
            }
        },
        "script": {
            "root": "Interact with GameTest debugger",
            "debugger": {
                "root": "Debugger",
                "close": "Close debugger",
                "connect": "Connect to a debugger",
                "listen": "Listen to a debugger",
                "host": "Host of debugger",
                "port": "Port on host"
            },
            "profiler": {
                "root": "Profiler",
                "start": "Start profiler",
                "stop": "Stop profiler"
            },
            "watchdog": {
                "root": "Watchdog",
                "exportstats": "Export Watchdog statistics"
            }
        },
        "scriptevent": {
            "root": "Trigger GameTest script event",
            "id": "Event ID (namespace required)",
            "message": "Message"
        },
        "setblock": {
            "root": "Place a block at specified position",
            "modes": {
                "destroy": "Break original block as if a player digs it (drop item, play animation)",
                "keep": "Replace only Air blocks",
                "replace": "Replace the original block anyway"
            }
        },
        "setmaxplayers": {
            "root": "Set max players allowed in the world",
            "value": "New max players number"
        },
        "setworldspawn": {
            "root": "Set the world spawn point",
            "here": "Use command execution point as world spawn"
        },
        "spawnpoint": {
            "root": "Set players' spawn point",
            "here": "Use command execution point as spawn point"
        },
        "spreadplayers": {
            "root": "Spread entities to different locations within an area",
            "distance": "Min distance between any 2 victims",
            "max_range": "Half the length of side of the square spreading area"
        },
        "stopsound": {
            "root": "Stop playing sound for players"
        },
        "structure": {
            "root": "Interact with structure system",
            "include_entity": "Include entities or not",
            "include_block": "Include blocks or not",
            "name": "Structure name",
            "save": {
                "root": "Save a structure",
                "modes": {
                    "disk": "Save in disk",
                    "memory": "Save in memory (vanish when leaving world)"
                }
            },
            "load": {
                "root": "Load a structure",
                "rotations": {
                    "0_degrees": "No rotation",
                    "90_degrees": "90 degrees clockwise rotation",
                    "180_degrees": "180 degrees rotation",
                    "270_degrees": "90 degrees counterclockwise rotation"
                },
                "flip": {
                    "none": "No flipping",
                    "x": "Flip structure on X axis",
                    "z": "Flip structure on Z axis",
                    "xz": "Flip structure on X and Z axis"
                },
                "anims": {
                    "block_by_block": "Play a block-by-block building animation",
                    "layer_by_layer": "Play a layer-by-layer building animation"
                },
                "anim_sec": "Duration of animation (seconds)",
                "water_logged": "Whether to waterlog blocks loaded in water or not",
                "integrity": "Integrity (chance of each block being loaded) (0~100)",
                "seed": "Seed of random algorithm that decides whether a block is placed according to integrity"
            },
            "delete": "Delete a structure"
        },
        "summon": {
            "root": "Summon an entity"
        },
        "tag": {
            "root": "Manage entity tags",
            "tag": "Entity tag",
            "wildcard_target": "All entities tracked in system",
            "add": "Give entities a tag",
            "remove": "Remove a tag from entities",
            "list": "List the tags entities have"
        },
        "teleport": {
            "root": "Teleport entities and/or change their rotation",
            "to_entity": "Teleport Entity 1 to Entity 2",
            "self2entity": "Teleport executer to given entity",
            "check_for_blocks": "Whether to only teleport when target would not collide with a block it cannot be inside"
        },
        "tellraw": {
            "root": "Send specified players a message using rawtext"
        },
        "testfor": {
            "root": "Test if entity that matches given conditions exists"
        },
        "testforblock": {
            "root": "Test if a block at specified position matches given block type"
        },
        "testforblocks": {
            "root": "Test if two areas of blocks match"
        },
        "tickingarea": {
            "root": "Manage ticking areas",
            "set_preload": "Preload area (load it first) or not",
            "add": "Add a ticking area",
            "remove": "Remove a ticking area",
            "remove_all": "Remove all ticking areas",
            "list": {
                "root": "List currently defined ticking areas",
                "cur_dim": "List areas in current dimension only",
                "all_dims": "List areas in all dimensions"
            },
            "preload": {
                "root": "Manage preload states of areas",
                "query": "Inquire about whether the area is marked as preload"
            }
        },
        "time": {
            "root": "Interact with time system",
            "amount": "Amount (game ticks)",
            "add": "Add internal time",
            "query": {
                "root": "Inquire about several time statistics",
                "types": {
                    "daytime": "Ticks passed since last dawn (internal time / 24000)",
                    "gametime": "Age of the world in ticks",
                    "day": "Number of game days (24000 ticks) passed"
                }
            },
            "set": {
                "root": "Directly modify internal time",
                "alias": {
                    "day": "Daytime (1000)",
                    "night": "Night (13000)",
                    "noon": "Noon (6000)",
                    "midnight": "Midnight (18000)",
                    "sunrise": "Sun rise (23000)",
                    "sunset": "Sun set (12000)"
                }
            }
        },
        "title": {
            "root": "Manage screen titles",
            "title": "Display in the middle of screen",
            "subtitle": "Display below title (only available when title exists)",
            "actionbar": "Display above hotbar",
            "clear": "Clear screen titles",
            "times": {
                "root": "Change title fade-in, stay and fade-out times",
                "fade_in": "Fade in time (game ticks)",
                "hold": "Stay time (game ticks)",
                "fade_out": "Fade out time (game ticks)"
            },
            "reset": "Reset times settings to default value"
        },
        "titleraw": {
            "root": "Manage screen titles using rawtext"
        },
        "toggledownfall": {
            "root": "Toggle weather (clear -> rain/snow, other -> clear)"
        },
        "volumearea": {
            "root": "Manage volume areas",
            "name": "Volume area name",
            "add": {
                "root": "Add a volume area",
                "id": "Volume area identifier"
            },
            "remove": "Remove a volume area",
            "remove_all": "Remove all volume areas",
            "list": {
                "root": "List currently defined volume areas",
                "cur_dim": "List areas in current dimension only",
                "all_dims": "List areas in all dimensions"
            }
        },
        "worldbuilder": {
            "root": "Toggle World Builder permission for executer"
        },
        "weather": {
            "root": "Manage weather",
            "set": {
                "duration": "Duration of specified weather (game ticks)",
                "weathers": {
                    "clear": "Sunny day",
                    "rain": "Rainy day",
                    "thunder": "Thunderstorm"
                }
            },
            "query": "Inquire about weather"
        },
        "xp": {
            "root": "Add/Remove players' experience point/level",
            "level": "In levels",
            "amount": "Amount to add (<0 -> remove)"
        }
    },
    "error": {
        "syntax": {
            "_root": "{ln}:{col}: {suberrs}",
            "_separator": "; ",
            "expect": {
                "_root": "Expect {content}",
                "_separator": " or ",
                "char": "{char!r}",
                "keyword": "{keyword!r}",
                "terminator": "a terminator like space",
                "enum": "one of {options}",
                "quoted_str": "a quoted string",
                "int": "an integer",
                "float": "a float",
                "offset_float": "a float offset",
                "word": "a word",
                "bool": "a boolean (true/false)",
                "chars": "{chars!r}",
                "swizzle": "combination of x, y and z",
                "bare_text": "any text",
                "json": "a JSON expression"
            },
            "unclosed_str": "Unclosed string",
            "too_many_args": "Too many arguments",
            "id_invalid": "Invalid character {char!r} in namespaced ID",
            "json_str_u_escape": "Expecting 4 hex digits after \\u",
            "illegal_word": "Illegal word, try add quotes if possible"
        },
        "semantic": {
            "_root": "{ln1}:{col1}~{ln2}:{col2}: {message}",
            "number": {
                "out_of_range": "Number out of range {min}~{max}",
                "cant_be": "Number can't be {num}",
                "must_be": "Number must be one of {nums}"
            },
            "json_str": "JSON string: {suberr}"
        }
    },
    "autocomp": {
        "space": "(Space)",
        "eol": "(Line Finish)",
        "char": "{char}",
        "integer": "(Integer)",
        "float": "(Float)",
        "word": "(Word)",
        "quoted_string": "(Quoted String)",
        "keyword": "{keyword}",
        "option": "{option}",
        "bare_text": "(Any Text)",
        "offset_float": "(Float)",
        "true": "true",
        "false": "false",
        "chars": "{chars}",
        "swizzle": "{swizzle}",
        "no_idtable": {
            "_hint": "(Load proper ID table to see hints)",
            "item": "[Item Type]",
            "entity": "[Entity Type]",
            "family": "[Entity Family]",
            "entity_slot": "[Entity Slot Type]",
            "block_slot": "[Block Slot Type]",
            "block": "[Block Type]",
            "damage": "[Damage Cause]",
            "effect": "[Effect (Buff)]",
            "entity_event": "[Entity Event]",
            "fog": "[Fog]",
            "game_rule": "[Game Rule]",
            "permission": "[Input Permission]",
            "biome": "[Biome]",
            "structure": "[Structure]",
            "mob_event": "[Mob Event]",
            "music": "[Sound (Music)]",
            "sound": "[Sound]",
            "loot_table": "[Loot Table Path]",
            "rpac_state": "[Anim. Controller State]",
            "animation_ref": "[Entity Anim. Reference]",
            "rpac": "[Animation Controller]",
            "recipe": "[Recipe]",
            "camera_preset": "[Camera Preset]",
            "ease_type": "[Easing Function]",
            "ability": "[Ability]",
            "particle": "[Particle]"
        },
        "dynamic_id_fails": "(Can't find in ID table)"
    },
    "tkapp": {
        "no_error": "No error found :)"
    }
}
